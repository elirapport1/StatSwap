name: Daily Stats Update

on:
  schedule:
    # Runs at 6:38 PM Central Time (23:38 UTC)
    - cron: '36 10 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: npm ci

      - name: Create build script
        run: |
          echo '{
            "compilerOptions": {
              "target": "ES2022",
              "module": "NodeNext",
              "moduleResolution": "nodenext",
              "esModuleInterop": true,
              "resolveJsonModule": true,
              "skipLibCheck": true,
              "strict": true,
              "outDir": "./dist-scripts",
              "rootDir": "./src",
              "allowJs": true,
              "checkJs": false
            },
            "include": ["src/data/*.ts", "src/data/*.js"]
          }' > tsconfig.build.json

      - name: Create mock data directory
        run: |
          mkdir -p src/data
          echo "export const scrapeStatFromStatmuse = async (query: string): Promise<number> => { return Math.floor(Math.random() * 1000); };" > src/data/scrape_stats.js

      - name: Update playerStats imports
        run: |
          sed -i 's/from '\''\.\/scrape_stats'\''/from '\''\.\/scrape_stats\.js'\''/g' src/data/playerStats.ts

      - name: Compile and run stats generator
        run: |
          # Compile TypeScript to JavaScript
          npx tsc -p tsconfig.build.json
          # Run the compiled JavaScript
          node dist-scripts/data/playerStats.js
        env:
          NODE_ENV: production

      - name: Build application
        run: |
          npm run build
          # Confirm that the dist folder exists
          ls -al dist || echo "No 'dist' folder found!"
        env:
          NODE_ENV: production

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit and push if changes
        run: |
          git checkout src/data/playerStats.ts
          git add src/data/player_stats.json
          git diff --staged --quiet || (git commit -m "Update player stats for $(date +'%Y-%m-%d')" && git push)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist
          name: github-pages  # Ensures name matches what "deploy-pages" expects

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

      # ---- OPTIONAL: Uncomment these if/when you want to enable Twilio & Supabase again ----
      #
      - name: Send SMS Notifications
        run: |
          npm install @supabase/supabase-js twilio
          node -e '
            const { createClient } = require("@supabase/supabase-js");
            const twilio = require("twilio");
      
            async function sendNotifications() {
              const supabase = createClient(
                process.env.SUPABASE_URL,
                process.env.SUPABASE_SERVICE_KEY
              );
      
              const twilioClient = twilio(
                process.env.TWILIO_ACCOUNT_SID,
                process.env.TWILIO_AUTH_TOKEN
              );
      
              // Fetch all phone numbers
              const { data: subscribers, error } = await supabase
                .from("notifications")
                .select("phone_number");
      
              if (error) {
                console.error("Error fetching subscribers:", error);
                process.exit(1);
              }
      
              // Send SMS to each subscriber
              const message = "Good morning! ðŸ¤— ðŸ˜´ new day new statswap! https://elirapport1.github.io/StatSwap";
      
              for (const subscriber of subscribers) {
                try {
                  await twilioClient.messages.create({
                    body: message,
                    to: subscriber.phone_number,
                    from: process.env.TWILIO_PHONE_NUMBER
                  });
                  console.log(`SMS sent to ${subscriber.phone_number}`);
                } catch (err) {
                  console.error(`Failed to send SMS to ${subscriber.phone_number}:`, err);
                }
              }
            }
      
            sendNotifications().catch(console.error);
          '
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
